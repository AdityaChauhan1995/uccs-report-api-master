'use strict';
const nodemailer = require('nodemailer');
const users = require('../model/user');
function createMailConnnection(receiver, downloadURL, reportName, reportGenerateDate, callback) {

    let transporter = nodemailer.createTransport({
        host: '10.200.58.80',
        port: 25,
        secure: false,
        // auth: {
        //     user: "aacadm@maxis.com.my",
        //     pass: "Qawsedrftg5432!"
        // },
        tls: { rejectUnauthorized: false }
    });

    let mailOptions = {
        from: "aacadm@maxis.com.my", // sender address
        to: receiver, // list of receivers
        subject: 'UCCS Report ' + reportName + ' requested ' + reportGenerateDate + ' is ready to download ', // Subject line
        text: 'Please download report from UCCS portal ' + downloadURL + "\n\n\n" + 'Please note: THIS IS AN AUTOGENERATED MAIL. This mailbox is not monitored and this mailbox is used only to send communication regarding the status of UCCS reports.', // plain text body
    };

    transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
            return console.log(error);
        }
        console.log('Message sent: %s', info.messageId);
        callback(error, info);
    });
}

function createMailConnnectionScheduledReport(receiver, downloadURL, reportName, reportGenerateDate, callback) {

    let transporter = nodemailer.createTransport({
        host: '10.200.58.80',
        port: 25,
        secure: false,
        // auth: {
        //     user: "aacadm@maxis.com.my",
        //     pass: "Qawsedrftg5432!"
        // },
        tls: { rejectUnauthorized: false }
    });

    var d = new Date();
    var n = (d.getDate().toString().length == 1)? "0"+d.getDate().toString():d.getDate().toString();
    var m = ((d.getMonth()+1).toString().length == 1)? "0"+(d.getMonth()+1).toString():(d.getMonth()+1).toString();
    var y = d.getFullYear().toString();
    var dateFormat = n+m+y;

    let fileName = reportName.replace(new RegExp(' ', 'g'), '_').replace(/[^a-zA-Z0-9 ]/g, "") + '_' +
                   dateFormat.replace(/[^0-9 ]/g, "") + ".csv";

    var attachments = [{ filename: fileName,                
        // path: __dirname + '/pdf/test.pdf', 
         path:downloadURL,
         contentType: 'application/csv' 
       }];

    let mailOptions = {
        from: "aacadm@maxis.com.my", // sender address
        to: receiver, // list of receivers
        subject: reportName + new Date().toISOString().replace(/[^0-9 ]/g, "") , // Subject line
        text: 'Please find the attached report from UCCS portal -' + fileName + "\n\n\n" + 'Please note: THIS IS AN AUTOGENERATED MAIL. This mailbox is not monitored and this mailbox is used only to send communication regarding the status of UCCS reports.', // plain text body
        attachments: attachments
    };
    

    transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
            return console.log(error);
        }
        console.log('Message sent: %s', info.messageId);
        callback(error, info);
    });
}

module.exports.sendMail = function (userid, filename, reportName, reportGenerateDate, cb) {
    var to = "";
    users.getUserById(userid, function (err, data) {
        if (err) { console.log("Error finding user details " + err); cb(err, null) }
        else if (!data) cb(null, 'Invalid user id for request');
        else {
            to = data.email;
            createMailConnnection(to, filename, reportName, reportGenerateDate, function (err, info) {
                if (err) cb(err, null);
                else
                    cb(null, info);
            });
        }
    });
}

module.exports.sendMailScheduledReport = function (userid, filename, reportName, reportGenerateDate, cb) {
    var to = "caditya@maxis.com.my";
    if(reportName.includes('DMSK')){
         to = "caditya@maxis.com.my";
    }else{
         to = "caditya@maxis.com.my";
    }
    createMailConnnectionScheduledReport(to, filename, reportName, reportGenerateDate, function (err, info) {
        if (err) cb(err, null);
        else
            cb(null, info);
    });
}